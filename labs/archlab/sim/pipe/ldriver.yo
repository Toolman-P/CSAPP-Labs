                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4d805000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f65803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f75001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 30fc0400000000000000 |   irmovq $4,%r12 
0x03c: 30fd0100000000000000 |   irmovq $1,%r13
0x046: 6300                 | 	xorq %rax,%rax		# count = 0;
0x048: 202e                 |   rrmovq %rdx,%r14
0x04a: 61ce                 |   subq %r12,%r14 #len<=4?
0x04c: 71fc00000000000000   |   jle Small #jump to small loop
                            |   
0x055:                      | Big:
0x055: 50870000000000000000 |   mrmovq (%rdi),%r8	# read val from src...
0x05f: 50970800000000000000 |   mrmovq 8(%rdi),%r9
0x069: 50a71000000000000000 |   mrmovq 16(%rdi),%r10
0x073: 50b71800000000000000 |   mrmovq 24(%rdi),%r11
                            | 
0x07d: 40860000000000000000 | 	rmmovq %r8,(%rsi)	# ...and store it to dst
0x087: 40960800000000000000 |   rmmovq %r9,8(%rsi)
0x091: 40a61000000000000000 |   rmmovq %r10,16(%rsi)
0x09b: 40b61800000000000000 |   rmmovq %r11,24(%rsi)
0x0a5:                      | test1:
0x0a5: 6288                 | 	andq %r8,%r8		# val <= 0?
0x0a7: 71b200000000000000   | 	jle test2		# if so, goto Npos:
0x0b0: 60d0                 | 	addq %r13,%rax		# count++
0x0b2:                      | test2:
0x0b2: 6299                 |   andq %r9,%r9
0x0b4: 71bf00000000000000   |   jle test3
0x0bd: 60d0                 |   addq %r13,%rax
0x0bf:                      | test3:
0x0bf: 62aa                 |   andq %r10,%r10
0x0c1: 71cc00000000000000   |   jle test4
0x0ca: 60d0                 |   addq %r13,%rax
0x0cc:                      | test4:
0x0cc: 62bb                 |   andq %r11,%r11
0x0ce: 71d900000000000000   |   jle N1pos
0x0d7: 60d0                 | 	addq %r13,%rax		# count++
0x0d9:                      | N1pos:
0x0d9: 61c2                 | 	subq %r12, %rdx		# len-=4
0x0db: c0f72000000000000000 | 	iaddq $32, %rdi		# src++
0x0e5: c0f62000000000000000 | 	iaddq $32, %rsi		# dst++
0x0ef: 202e                 |   rrmovq %rdx,%r14
0x0f1: 61ce                 |   subq %r12,%r14
0x0f3: 765500000000000000   | 	jg Big			# if so, goto Loop:
0x0fc:                      | Small:
0x0fc: 6222                 |   andq %rdx,%rdx
0x0fe: 714901000000000000   |   jle Done
0x107: 50870000000000000000 |   mrmovq (%rdi),%r8
0x111: 40860000000000000000 |   rmmovq %r8,(%rsi)
0x11b: 6288                 |   andq %r8,%r8
0x11d: 712801000000000000   |   jle N2pos
0x126: 60d0                 |   addq %r13,%rax
0x128:                      | N2pos:
0x128: 61d2                 |   subq %r13,%rdx
0x12a: c0f70800000000000000 |   iaddq $8,%rdi
0x134: c0f60800000000000000 |   iaddq $8,%rsi
0x13e: 6222                 |   andq %rdx,%rdx
0x140: 76fc00000000000000   |   jg Small
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x149:                      | Done:
0x149: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x14a:                      | End:
                            | #/* $end ncopy-ys */
0x14a:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x150:                      | 	.align 8
0x150:                      | src:
0x150: ffffffffffffffff     | 	.quad -1
0x158: 0200000000000000     | 	.quad 2
0x160: fdffffffffffffff     | 	.quad -3
0x168: fcffffffffffffff     | 	.quad -4
0x170: 0500000000000000     | 	.quad 5
0x178: faffffffffffffff     | 	.quad -6
0x180: 0700000000000000     | 	.quad 7
0x188: 0800000000000000     | 	.quad 8
0x190: f7ffffffffffffff     | 	.quad -9
0x198: f6ffffffffffffff     | 	.quad -10
0x1a0: f5ffffffffffffff     | 	.quad -11
0x1a8: f4ffffffffffffff     | 	.quad -12
0x1b0: 0d00000000000000     | 	.quad 13
0x1b8: f2ffffffffffffff     | 	.quad -14
0x1c0: f1ffffffffffffff     | 	.quad -15
0x1c8: 1000000000000000     | 	.quad 16
0x1d0: efffffffffffffff     | 	.quad -17
0x1d8: eeffffffffffffff     | 	.quad -18
0x1e0: edffffffffffffff     | 	.quad -19
0x1e8: 1400000000000000     | 	.quad 20
0x1f0: ebffffffffffffff     | 	.quad -21
0x1f8: eaffffffffffffff     | 	.quad -22
0x200: 1700000000000000     | 	.quad 23
0x208: e8ffffffffffffff     | 	.quad -24
0x210: e7ffffffffffffff     | 	.quad -25
0x218: e6ffffffffffffff     | 	.quad -26
0x220: e5ffffffffffffff     | 	.quad -27
0x228: e4ffffffffffffff     | 	.quad -28
0x230: 1d00000000000000     | 	.quad 29
0x238: e2ffffffffffffff     | 	.quad -30
0x240: e1ffffffffffffff     | 	.quad -31
0x248: 2000000000000000     | 	.quad 32
0x250: dfffffffffffffff     | 	.quad -33
0x258: deffffffffffffff     | 	.quad -34
0x260: 2300000000000000     | 	.quad 35
0x268: dcffffffffffffff     | 	.quad -36
0x270: dbffffffffffffff     | 	.quad -37
0x278: daffffffffffffff     | 	.quad -38
0x280: 2700000000000000     | 	.quad 39
0x288: 2800000000000000     | 	.quad 40
0x290: d7ffffffffffffff     | 	.quad -41
0x298: 2a00000000000000     | 	.quad 42
0x2a0: 2b00000000000000     | 	.quad 43
0x2a8: d4ffffffffffffff     | 	.quad -44
0x2b0: 2d00000000000000     | 	.quad 45
0x2b8: 2e00000000000000     | 	.quad 46
0x2c0: d1ffffffffffffff     | 	.quad -47
0x2c8: d0ffffffffffffff     | 	.quad -48
0x2d0: cfffffffffffffff     | 	.quad -49
0x2d8: 3200000000000000     | 	.quad 50
0x2e0: 3300000000000000     | 	.quad 51
0x2e8: 3400000000000000     | 	.quad 52
0x2f0: 3500000000000000     | 	.quad 53
0x2f8: 3600000000000000     | 	.quad 54
0x300: 3700000000000000     | 	.quad 55
0x308: 3800000000000000     | 	.quad 56
0x310: 3900000000000000     | 	.quad 57
0x318: 3a00000000000000     | 	.quad 58
0x320: 3b00000000000000     | 	.quad 59
0x328: 3c00000000000000     | 	.quad 60
0x330: 3d00000000000000     | 	.quad 61
0x338: 3e00000000000000     | 	.quad 62
0x340: 3f00000000000000     | 	.quad 63
0x348: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x350:                      | 	.align 16
0x350:                      | Predest:
0x350: fadebc0000000000     | 	.quad 0xbcdefa
0x358:                      | dest:
0x358: abefcd0000000000     | 	.quad 0xcdefab
0x360: abefcd0000000000     | 	.quad 0xcdefab
0x368: abefcd0000000000     | 	.quad 0xcdefab
0x370: abefcd0000000000     | 	.quad 0xcdefab
0x378: abefcd0000000000     | 	.quad 0xcdefab
0x380: abefcd0000000000     | 	.quad 0xcdefab
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550:                      | Postdest:
0x550: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x558:                      | .align 8
                            | # Run time stack
0x558: 0000000000000000     | 	.quad 0
0x560: 0000000000000000     | 	.quad 0
0x568: 0000000000000000     | 	.quad 0
0x570: 0000000000000000     | 	.quad 0
0x578: 0000000000000000     | 	.quad 0
0x580: 0000000000000000     | 	.quad 0
0x588: 0000000000000000     | 	.quad 0
0x590: 0000000000000000     | 	.quad 0
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
                            | 
0x5d8:                      | Stack:
